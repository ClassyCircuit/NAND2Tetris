// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //C instruction connected to ALU
    Not16(in=instruction, out=notInstruction);
    And16(a=instruction, b=notInstruction, out=instrZeroed); //Zeroes
    Mux16(a=instrZeroed, b=instruction, sel=instruction[15], out[0..2]=jumpBits,
                                                             out[3]=writeM, 
                                                             out[4]=d2,
                                                             out[5]=d1,
                                                             out[6]=c6,
                                                             out[7]=c5,
                                                             out[8]=c4,
                                                             out[9]=c3,
                                                             out[10]=c2,
                                                             out[11]=c1,
                                                             out[12]=aBit); //Mux before C_instruction splitter

    //A_register
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=instrMuxALU); //Mux before A_register
    Not(in=instruction[15], out=notOpCode); //Not before OR gate, only active if A_instruction is sent
    Or(a=d1, b=notOpCode, out=AInstrOrALUout); // OR before A_register (A_instruction sent or d1=1 in C_Instruction)
    ARegister(in=instrMuxALU, load=AInstrOrALUout, out=AregisterOut, out[0..14]=addressM); // A_register

    //D_register
    DRegister(in=ALUout, load=d2, out=DregisterOut); // D_register
    
    //ALU connections
    Mux16(a=AregisterOut, b=inM, sel=aBit, out=aMUXmRegister); //Mux before Y input in ALU. Choose between A and M register.
    ALU(x=DregisterOut, y=aMUXmRegister,
        zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
        out=outM, out=ALUout,
        zr=ALUzr, ng=ALUng);

    //Program Counter (PC)
    Not(in=jumpMUX, out=notJump);
    PC(in=AregisterOut, load=jumpMUX, inc=notJump, reset=reset, out[0..14]=pc);

    //JUMP logic
    Not(in=ALUzr, out=notALUzr);
    Not(in=ALUng, out=notALUng);
    And(a=notALUzr, b=notALUng, out=notZRandNotNG);
    Or(a=notZRandNotNG, b=ALUzr, out=JGE);
    Or(a=ALUzr, b=ALUng, out=JLE);
    Mux8Way(a=false,            //null (no jump)
              b=notZRandNotNG,  //JGT
              c=ALUzr,           //JEQ
              d=JGE,              //JGE
              e=ALUng,           //JLT
              f=notALUzr,       //JNE
              g=JLE,              //JLE
              h=true,             //JMP (unconditional jump)
              sel=jumpBits, out=jumpMUX);
}

